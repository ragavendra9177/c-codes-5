#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define FILE_NAME "students.dat"
#define NAME_SIZE 50

typedef struct {
    int id;
    char name[NAME_SIZE];
    int age;
    float grade;
} Student;

int studentCount = 0;
Student* students = NULL;

void clearInputBuffer() {
    int c;
    while ((c = getchar()) != '\n' && c != EOF);
}

void loadStudents() {
    FILE *file = fopen(FILE_NAME, "rb");
    if (file == NULL) return;

    fread(&studentCount, sizeof(int), 1, file);
    students = malloc(sizeof(Student) * studentCount);
    fread(students, sizeof(Student), studentCount, file);
    fclose(file);
}

void saveStudents() {
    FILE *file = fopen(FILE_NAME, "wb");
    if (file == NULL) {
        printf("Error saving student data!\n");
        return;
    }
    fwrite(&studentCount, sizeof(int), 1, file);
    fwrite(students, sizeof(Student), studentCount, file);
    fclose(file);
}

void addStudent() {
    students = realloc(students, sizeof(Student) * (studentCount + 1));
    if (students == NULL) {
        printf("Memory allocation failed!\n");
        return;
    }

    Student *s = &students[studentCount];
    s->id = studentCount + 1;

    printf("Enter student name: ");
    fgets(s->name, NAME_SIZE, stdin);
    s->name[strcspn(s->name, "\n")] = 0;

    printf("Enter student age: ");
    scanf("%d", &s->age);
    clearInputBuffer();

    printf("Enter student grade: ");
    scanf("%f", &s->grade);
    clearInputBuffer();

    studentCount++;
    saveStudents();
    printf("Student added successfully!\n");
}

void displayStudents() {
    if (studentCount == 0) {
        printf("No students available.\n");
        return;
    }
    printf("ID\tName\t\tAge\tGrade\n");
    printf("-------------------------------------\n");
    for (int i = 0; i < studentCount; i++) {
        printf("%d\t%s\t\t%d\t%.2f\n", students[i].id, students[i].name, students[i].age, students[i].grade);
    }
}

void updateStudent() {
    int id;
    printf("Enter student ID to update: ");
    scanf("%d", &id);
    clearInputBuffer();

    for (int i = 0; i < studentCount; i++) {
        if (students[i].id == id) {
            printf("Enter new name: ");
            fgets(students[i].name, NAME_SIZE, stdin);
            students[i].name[strcspn(students[i].name, "\n")] = 0;

            printf("Enter new age: ");
            scanf("%d", &students[i].age);
            clearInputBuffer();

            printf("Enter new grade: ");
            scanf("%f", &students[i].grade);
            clearInputBuffer();

            saveStudents();
            printf("Student updated successfully!\n");
            return;
        }
    }
    printf("Student not found!\n");
}

void deleteStudent() {
    int id;
    printf("Enter student ID to delete: ");
    scanf("%d", &id);
    clearInputBuffer();

    int index = -1;
    for (int i = 0; i < studentCount; i++) {
        if (students[i].id == id) {
            index = i;
            break;
        }
    }
    if (index == -1) {
        printf("Student not found!\n");
        return;
    }

    for (int i = index; i < studentCount - 1; i++) {
        students[i] = students[i + 1];
    }
    studentCount--;
    students = realloc(students, sizeof(Student) * studentCount);
    saveStudents();
    printf("Student deleted successfully!\n");
}

void sortStudentsByGrade() {
    for (int i = 0; i < studentCount - 1; i++) {
        for (int j = 0; j < studentCount - i - 1; j++) {
            if (students[j].grade > students[j + 1].grade) {
                Student temp = students[j];
                students[j] = students[j + 1];
                students[j + 1] = temp;
            }
        }
    }
    printf("Students sorted by grade.\n");
    displayStudents();
}

void searchStudentByName() {
    char name[NAME_SIZE];
    printf("Enter name to search: ");
    fgets(name, NAME_SIZE, stdin);
    name[strcspn(name, "\n")] = 0;

    for (int i = 0; i < studentCount; i++) {
        if (strcmp(students[i].name, name) == 0) {
            printf("ID: %d\n", students[i].id);
            printf("Name: %s\n", students[i].name);
            printf("Age: %d\n", students[i].age);
            printf("Grade: %.2f\n", students[i].grade);
            return;
        }
    }
    printf("Student not found!\n");
}

void menu() {
    int choice;
    loadStudents();

    while (1) {
        printf("\nStudent Database Management System\n");
        printf("1. Add Student\n");
        printf("2. Display All Students\n");
        printf("3. Update Student\n");
        printf("4. Delete Student\n");
        printf("5. Sort Students by Grade\n");
        printf("6. Search Student by Name\n");
        printf("7. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        clearInputBuffer();

        switch (choice) {
            case 1:
                addStudent();
                break;
            case 2:
                displayStudents();
                break;
            case 3:
                updateStudent();
                break;
            case 4:
                deleteStudent();
                break;
            case 5:
                sortStudentsByGrade();
                break;
            case 6:
                searchStudentByName();
                break;
            case 7:
                free(students);
                printf("Exiting program.\n");
                exit(0);
            default:
                printf("Invalid choice! Try again.\n");
        }
    }
}

int main() {
    menu();
    return 0;
}
